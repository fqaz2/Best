@model IEnumerable<BestUser>
@inject SignInManager<BestUser> SignInManager
@inject UserManager<BestUser> UserManager
@{
    ViewData["Title"] = "Users";
    var isSign = SignInManager.IsSignedIn(User);
    var IsAdmin = false;
    BestUser SignUser = null;
    if (isSign)
    {
        SignUser = await UserManager.GetUserAsync(User);
        IsAdmin = await UserManager.IsInRoleAsync(SignUser, "Administrator");
    }
}

<h1>Users</h1>
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.UserName)</th>
            <th>@Html.DisplayNameFor(model => model.PhoneNumber)</th>
            <th>Role</th>
            <th>@Html.DisplayNameFor(model => model.IsBlock)</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in Model)
        {
            <tr>
                <td>@Html.DisplayFor(u => user.UserName)</td>
                <td>@Html.DisplayFor(u => user.PhoneNumber)</td>
                <td>
                    @foreach(var roles in await UserManager.GetRolesAsync(user))
                    {
                        @roles
                    }
                </td>
                <th>@Html.DisplayFor(u => user.IsBlock)</th>
                <td>
                    <a class="btn btn-primary" asp-action="Details" asp-route-id="@user.Id">Details</a>
                    @if (isSign && (IsAdmin || SignUser == user))
                    {
                        @if (IsAdmin)
                        {
                            <a class="btn btn-danger" asp-action="AddRole" asp-route-id="@user.Id">Add role</a>
                        }
                        <a class="btn btn-warning" asp-action="Block" asp-route-id="@user.Id">Block/Unblock</a>
                        <a class="btn btn-danger" asp-action="Delete" asp-route-id="@user.Id">Delete</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>